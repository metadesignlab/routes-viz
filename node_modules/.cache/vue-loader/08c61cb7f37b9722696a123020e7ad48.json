{"remainingRequest":"/Users/bianchi_dy/Documents/GitHub/ingredient-network/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bianchi_dy/Documents/GitHub/ingredient-network/src/components/Network.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/bianchi_dy/Documents/GitHub/ingredient-network/src/components/Network.vue","mtime":1606200305775},{"path":"/Users/bianchi_dy/Documents/GitHub/ingredient-network/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/bianchi_dy/Documents/GitHub/ingredient-network/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/bianchi_dy/Documents/GitHub/ingredient-network/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/bianchi_dy/Documents/GitHub/ingredient-network/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bianchi_dy/Documents/GitHub/ingredient-network/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&display=swap');\n",{"version":3,"sources":["Network.vue"],"names":[],"mappingskuBA","file":"Network.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"app\" class=\"flex flex-col p-4\" >\n    <!-- Header -->\n    <div class=\"header flex flex-row items-start\">\n      <button v-on:click=\"goBack()\"\n        :class=\"`sm:text-base md:text-lg lg:text-xl btn-orange ` \n        + (stepper > 0 ? `` : `opacity-25 cursor-not-allowed`)\">\n        <\n      </button>\n\n      <div class=\"w-4/5 px-2\">\n        <div class='top-header text-base font-bold text-black sm:text-base md:text-lg lg:text-xl'>\n          What ingredients go together with chilli?\n        </div>\n        <div class='sub-header mt-2 sm:text-sm md:text-tiny lg:text-base justify-center'>\n          <div class=\"px-1\">\n            {{helperText}}\n          </div>\n          <div v-if=\"stepper === stepList.length-1\" class='inline-flex'>\n            <div class=\"inline-flex items-center\">\n              <span class=\"dot1\"></span>\n              <span class=\"dot2\"></span>\n            </div>\n            <div class=\"mx-1\">\n              Number of recipes\n            </div>\n            <div class=\"ml-1 flex flex-col justify-center\">\n              <span class=\"rectangle1\" :style=\"{'background-color': linkStroke}\"></span>\n              <span class=\"rectangle2\" :style=\"{'background-color': linkStroke}\"></span>\n            </div>\n            <div class=\"ml-1\">\n              Number of co-occurences\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <button v-on:click=\"goForward()\"\n        :class=\"`sm:text-base md:text-lg lg:text-xl btn-orange ` \n        + (stepper === stepList.length - 1 ? `opacity-25 cursor-not-allowed` : ``)\">\n        >\n      </button>\n    </div>\n\n    <div id=\"chart\" class=\"justify-center flex my-1\"> \n    </div>\n\n    <div id='sidebar' class=\"flex flex-no-wrap\">\n      <div\n        :class=\"`rounded-full\n                  flex ` + (stepper === stepList.length - 1 ? \n                  `rounded-full h-20 w-20 flex items-center justify-center bg-black` \n                  : ` h-1/5 w-1/5 sm:h-1/4 sm:w-1/4 md:h-1/5 md:w-1/5 items-start justify-start`)\"\n      > \n        <img :src=\"imgActiveNode\" />\n      </div>\n\n\n      <div class=\"sidebar-text ml-2\">\n\n        <div v-if=\"stepper === stepList.length - 1\">\n          <div class='text-sm sm:text-sm md:text-base lg:text-lg pb-1'>\n            <div :style=\"{'background-color': activeNodeColor}\"\n              :class=\"`rounded inline-flex items-center px-1 ` + (blackOut.includes(activeNodeColor) ? 'text-black' : 'text-white')\">\n                <div class=\"sauces\">{{formatActiveNode}} </div>\n              </div>\n            \n            can be found in <b class=\"sauces\"> {{activeNodeSauces}} / {{allSauces}} sauces (~{{saucePercentage}}%)</b>\n          </div>\n\n          <div v-if=\"activeNodeSidebar.length > 0\" class=\"text-sm sm:text-sm md:text-tiny lg:text-tiny\">\n            <div class=\"pt-1\">\n              {{activeNodeSidebar}}\n            </div>\n            <div v-if=\"activeNodeVariants !== null\"  class=\"pt-1\">\n              <b class=\"sauces\"> Types of {{activeNode}}: </b> {{activeNodeVariants}}\n            </div>\n          </div>\n        </div>\n        \n        <div v-else \n          :class=\"`text-sm sm:text-sm md:text-tiny lg:text-tiny ` + (stepper === -1 ? 'font-bold' : '')\">\n            <!-- Instructions-->\n            {{activeNodeSidebar}}\n            <div class=\"mt-2\">\n              {{activeNodeVariants}} \n            </div>\n            \n          </div>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\nimport { json, csv } from 'd3-fetch'\n//'../assets/js/mykey.js'\n// DOMTokenList.prototype.indexOf = Array.prototype.indexOf;\n\nexport default {\n  name: \"network\",\n  props: {\n    jsonURL: {\n      type: String,\n      default: () => 'ingredients_network_final.json'\n    },\n\n    csvURL: {\n      type: String,\n      default: () => 'sidebar_text_final.csv'\n    },\n    linkDistance: {\n      type: Number,\n      default: 100\n    },\n    // svg\n    svgSize: {\n      type: Object,\n      default: () => {\n        return {\n          width: window.innerWidth,\n          height: window.innerHeight\n        };\n      }\n    },\n    bodyStrength: {\n      type: Number,\n      default: -700\n    },\n\n    height: {\n      type: Number,\n      default: () => 500\n    },\n    \n    width: {\n      type: Number,\n      default: () => 500\n    },\n\n    margin: {\n      type: Object,\n      default: function () {\n        return {\n          top: 25,\n          right: 25,\n          bottom: 25,\n          left: 25\n        }\n      }\n    } \n  },\n  data() {\n    return {\n      selection: {\n        links: [],\n        nodes: []\n      },\n      pinned: [], \n      nodeList: [],\n      linkList: [],\n      stepList: [],\n      profileIngredients: [],\n      force: null,\n      zoom: d3.zoom(),\n      nodeColor: ['#FFDA95', '#FCB040', '#FF7629', '#E4140F', '#612348', '#006428',\n                '#33A844', '#A0B036', '#D0E820', '#D8CECB'],\n      blackOut: ['#FFDA95', '#D0E820', '#D8CECB', '#FCB040'],\n      highlightFlavors: [],\n      activeNode: 'Flavor',\n      activeNodeColor: 'black',\n      activeNodeProfile: 3,\n      activeNodeSidebar: 'Click on the arrows above to explore common flavours that are paired with chili.',\n      activeNodeVariants: '',\n      activeNodeSauces: 0,\n      allSauces: 45,\n      transitionSpeed: 200,\n      curves: true,\n      stepper: 0,\n      linkStroke: '#b38000',\n    };\n  },\n  computed: {\n    helperText() {\n      if (this.stepper < this.stepList.length - 1) {\n        return \"Part \" + (this.stepper + 1) + \" of \" + this.stepList.length\n      } else {\n        return ''\n      }\n    },\n\n    formatActiveNode(){\n      let newName = this.activeNode.replace(/^\\w/, c => c.toUpperCase()).split(' ').join(' ')\n      return newName\n    },\n\n    imgActiveNode() {\n      let newName \n      if (this.stepper < this.stepList.length - 1 ) {\n        newName = \"ingredients/Spicy_flavour_\"+this.activeNode.replace(/^\\w/, c => c.toLowerCase()).split(' ').join('') + \".png\"\n      } else {\n        newName = \"ingredients/Spicy_\"+this.activeNodeProfile+\".png\"\n      }\n      return newName\n    },\n\n    saucePercentage() {\n      return Math.ceil(this.activeNodeSauces/this.allSauces * 100)\n    },\n\n    nodes() {\n      let nodes = this.nodeList.slice();\n      let nodeIds = [];\n      nodes = nodes.filter(node => {\n        if (nodeIds.indexOf(node.id) === -1) {\n          nodeIds.push(node.id);\n          return true;\n        } else {\n          return false;\n        }\n      });\n      return nodes;\n    },\n\n    legend(){\n      let legendBase = [];\n      for (let i in this.nodeColor) {\n        let color = this.nodeColor[i];\n        let meaning = this.flavors[i];\n        legendBase.push({color, meaning});\n      }\n      return legendBase;\n    },\n\n    links() {\n      return this.linkList;\n    },\n  },\n  watch: {\n    bodyStrength: function() {\n      this.initData();\n      this.$nextTick(function() {\n        this.initDragTickZoom();\n      });\n    },\n    linkDistance: function() {\n      this.initData();\n      this.$nextTick(function() {\n        this.initDragTickZoom();\n      });\n    },\n    nodes: function() {\n      this.initData();\n      this.$nextTick(function() {\n        this.initDragTickZoom();\n      });\n    }\n  },\n\n  created() {\n    this.initData();\n  },\n\n  mounted() {\n    this.getData()\n    this.initDragTickZoom();\n  },\n\n  methods: {\n    highlightSelective(activeIndex, decreaseOpacity) {\n      // Highlight the right things\n      // Check if chili or other steps\n      if (activeIndex > -1) {\n        let ingredients = this.profileIngredients[activeIndex]\n        this.highlightNode(ingredients, false, false, decreaseOpacity)\n      } else {\n        let highlightLinks = this.stepper === 0 ? true : false\n        this.highlightNode(activeNode, highlightLinks, true, decreaseOpacity)\n      }\n\n      this.$forceUpdate();\n    },\n\n    goBack () {\n      if (this.stepper - 1 >= 0 ) {\n        //d3.select('#legend').select('svg').remove()\n        this.stepper -=1\n        let step = this.stepList[this.stepper]\n        this.activeNode = step.highlight\n        this.activeNodeSidebar = step.sidebartext\n        let highlights = this.highlightFlavors[this.stepper]\n        \n        // Goes through highlighted flavor profiles \n        for (let hi in highlights) {\n          let highlight = highlights[hi]\n          if (hi > 0) {\n            this.highlightSelective(highlight, false)\n          } else {\n            this.highlightSelective(highlight, true)\n          }\n        } \n      } \n    },\n\n    goForward () {\n      this.stepper +=1\n      if (this.stepper < this.stepList.length - 1) {\n        let step = this.stepList[this.stepper]\n        this.activeNode = step.highlight\n        this.activeNodeSidebar = step.sidebartext\n        let highlights = this.highlightFlavors[this.stepper]\n        \n        // Goes through highlighted flavor profiles \n        for (let hi in highlights) {\n          let highlight = highlights[hi]\n          if (hi > 0) {\n            this.highlightSelective(highlight, false)\n          } else {\n            this.highlightSelective(highlight, true)\n          }\n        } \n      } else {\n        this.stepper = 3\n        this.activeNode = 'Ingredient'\n        this.activeNodeColor = 'black'\n        this.activeNodeProfile = 3\n        this.activeNodeSidebar = 'Hover/click on the circles to find out more about each ingredient.'\n        this.activeNodeVariants = null\n        this.noSelectedState();\n        this.$forceUpdate();\n      }\n    },\n\n    update(){\n      d3.select('#chart').select('svg').remove()\n      this.svg = this.getSvg()\n      this.drawChart()\n    },\n\n    getData () {\n      if (!this.jsonURL) {\n        throw new Error('Please provide either data or jsonURL')\n      } else {\n        this.processJSON(this.jsonURL)\n        this.processCSV(this.csvURL)\n      }\n    },\n\n    getString(row) {\n      let label = row['country'].includes('mean') ? 'Average value for ' + row['element'] : row['country'] \n      let value = label + ': ' + (row[this.activeIndex] ? Math.round(row[this.activeIndex] * 10) / 10 : 'NIL')\n      return value\n    },\n\n    processCSV (url) {\n      csv(url).then((data) => {\n        this.stepList = data;\n        data.forEach(d => {\n          let flavors = d.flavourprofile.split(',')\n          let newFlavors = []\n          for (let i in flavors) {\n            newFlavors.push(parseInt(flavors[i]))\n          }\n          this.highlightFlavors.push(newFlavors)\n        })\n        \n        this.activeNode = this.stepList[this.stepper].highlight\n        this.activeNodeColor = this.nodeColor[this.stepList[this.stepper]]\n        this.activeNodeSidebar = this.stepList[this.stepper].sidebartext\n\n        let highlights = this.highlightFlavors[this.stepper]\n        \n        // Goes through highlighted flavor profiles \n        for (let hi in highlights) {\n          let highlight = highlights[hi]\n          if (hi > 0) {\n            this.highlightSelective(highlight, false)\n          } else {\n            this.highlightSelective(highlight, true)\n          }\n          \n        }\n      })\n    },\n\n    processJSON (url) {\n      json(url).then((data) => {\n        this.linkList = data.links\n        this.nodeList = data.nodes\n\n        this.nodeList.forEach( node=> {\n          if (node.profile in this.profileIngredients === false) {\n            this.profileIngredients[node.profile] = []\n          }\n\n          this.profileIngredients[node.profile].push(node.id);\n        })\n\n        this.mount = true\n        this.update()\n      })\n    },\n\n    getSvg () {\n      const { svgWidth, svgHeight } = this\n      const { margin } = this\n\n      this.svgWidth = this.width\n      this.svgHeight = this.height\n      const width = this.svgWidth + margin.left + margin.right\n      const height = this.svgHeight + margin.top + margin.bottom\n\n      let svg = d3.select(\"#chart\").append(\"svg\")\n              .attr(\"width\", width)\n              .attr(\"height\", height)\n              .attr(\"id\", \"container\")\n              .call(this.responsivefy);\n\n      return svg\n    },\n\n    drawChart() {\n      let edges \n      if (this.curves) {\n        edges = this.svg.append(\"g\")\n          .selectAll(\".link\")\n          .data(this.links)\n          .join(\"path\")\n          .attr(\"opacity\", 0.4)\n          .attr(\"stroke\", this.linkStroke)\n          .attr(\"fill\", \"transparent\")\n          .attr('class', function(d) {\n            let source = d.source.split(' ').join('-');\n            let target = d.target.split(' ').join('-');\n            return 'link element ' + source + ' ' + target;\n            })\n          .attr('stroke-linecap', 'round')\n          .attr('stroke-width', function (d) {\n            return d.value;\n          });\n      } else {\n        edges = this.svg.append(\"g\")\n        .selectAll(\".link\")\n        .data(this.links)\n        .enter().append(\"line\")\n        .attr('class', function(d) {\n          let source = d.source.split(' ').join('-');\n          let target = d.target.split(' ').join('-');\n          return 'link element ' + source + ' ' + target;\n          })\n        .attr('opacity', 0.4)\n        .attr('stroke-linecap', 'round')\n        .attr('stroke', this.linkStroke)\n        .attr('stroke-width', (d) => d[this.linkTextKey]*0.75);\n      }\n\n      let nodes = this.svg.append(\"g\")\n        .selectAll(\".node\")\n        .data(this.nodes)\n        .enter().append('circle')\n        .attr('id', (d) => d.index)\n        .attr('class', function(d) {\n          let nodeClass=''\n          return 'node element ' + d.id.split(' ').join('-');\n          })\n        .attr('fill', (d) => this.nodeColor[d['profile']])\n        .attr('r', (d) => d3.scaleLinear().domain([1, 45]).range([24, 70])(d.count))\n        .on('mouseover', (d, e, nodes) => this.nodeMouseover(d, e, nodes))\n        .on('mouseout', (d, e, nodes) => this.nodeMouseout(d, e, nodes));\n\n      let blackOut = this.blackOut\n\n      // Add single line text\n      this.svg.append(\"g\")\n        .selectAll(\".text\")\n        .data(this.nodes)\n        .enter()\n        .append('text')\n        .attr('class', function(d) {\n          let nodeClass=''\n          return 'node-text ' + d.id.split(' ').join('-');\n        })\n        .html(function (d) { \n          if (d.id.split(' ').length > 1) {\n            let elements = d.id.split(' ');\n            let string = '';\n            for (let i in elements) {\n              if (i == 0) {\n                string += '<tspan dy=\"-0.2em\">'+ elements[i] + '</tspan>'\n              } else {\n                if (elements.length ==2) {\n                  string += '<tspan dx=\"-2.5em\" dy=\"0.8em\">'+ elements[i] + '</tspan>'\n                } else {\n                  string += '<tspan dx=\"-2.2em\" dy=\"0.8em\">'+ elements[i] + '</tspan>'\n                }\n              }\n            }\n            return string;\n          } else {\n            return '<tspan dy=\"0.4em\">'+ d.id + '</tspan>'\n          }\n          })\n        .attr('fill', (d) => this.nodeColor[d['profile']])\n        .attr('dx', 0)\n        .attr('alignment-baseline', 'text-top')\n        .attr('text-anchor', 'middle')\n        .attr('fill', (d) => blackOut.indexOf(this.nodeColor[d.profile]) > -1 ? 'bg-gray-800' : 'white')\n        .style(\"font-weight\", 500)\n        .attr('font-size', (d) => d3.scaleLinear().domain([30,70]).range([10, 22])(d.radius))\n        .on('mouseover', (d, e, nodes) => this.nodeMouseover(d, e, nodes))\n        .on('mouseout', (d, e, nodes) => this.nodeMouseout(d, e, nodes));\n\n      this.initDragTickZoom()\n    },\n\n    nodeMouseover(d, e, nodes) {\n      if (this.stepper === this.stepList.length-1) {\n        let targetNode = nodes[e]\n        this.activeNode = d.id\n        this.activeNodeColor = this.nodeColor[d.profile]\n        this.activeNodeProfile = d.profile\n        this.activeNodeSauces = d.count\n        this.activeNodeSidebar = d.text\n        this.activeNodeVariants = d.variants\n        let highlightLinks = true\n\n        if (this.pinned.length === 0) {\n            this.selection.nodes.push(nodes);\n            this.highlightNode(this.activeNode, highlightLinks, true, true);\n          }\n        this.$forceUpdate();\n      }\n    },\n\n    highlightNode(nodeName, highlightLinks, highlightOthers, decreaseOpacity){\n      let nodeClass = []\n      \n      if (Array.isArray(nodeName)) {\n        for (let i in nodeName){\n          nodeClass.push(nodeName[i].split(' ').join('-'))\n        }\n      } else {\n        nodeClass = nodeName.split(' ').join('-');\n      }\n\n      if (decreaseOpacity) {\n        // Decrease opacity for all irrelevant nodes and their text\n        d3.selectAll(\".node.element\").transition().duration(this.transitionSpeed).style(\"opacity\", 0.05);\n        d3.selectAll(\".node-text\").transition().duration(this.transitionSpeed).style(\"opacity\", 0.05);\n      }\n\n      // Highlight relevant nodes and their text\n      if (Array.isArray(nodeClass)) {\n        for (let i in nodeClass){\n          d3.selectAll(\".node.element.\"+nodeClass[i]).transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n        d3.selectAll(\".node-text.\"+nodeClass[i]).transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n        }\n      } else {\n        d3.selectAll(\".node.element.\"+nodeClass).transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n        d3.selectAll(\".node-text.\"+nodeClass).transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n      }\n\n      // Applicable only to mouse interactions, and NOT to stepper\n      if (highlightOthers) {\n        let otherNodes = this.identifyTargets(nodeName);\n        otherNodes.forEach(node => {\n          d3.selectAll(\".node.element.\"+ node).transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n          d3.selectAll(\".node-text.\"+ node).transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n        })\n      }\n      \n      if (decreaseOpacity) {\n        // Decrease opacity of irrelevant links\n        d3.selectAll(\".link.element\").transition().duration(this.transitionSpeed).style(\"opacity\", 0.01);\n      }\n\n      // Higlight links\n      if (highlightLinks) {\n        let source = nodeName.split(' ').join('-')\n        let sourceClass = \".link.element.\" + source\n        d3.selectAll(sourceClass).transition().duration(this.transitionSpeed).style(\"opacity\", 0.4);\n      }\n    },\n\n    identifyTargets(nodeName) {\n      let targetNodes = []\n      let count = 0\n      this.links.forEach(link => {\n        if (link.source.id === nodeName || link.target.id === nodeName){\n          count+=1;\n        }\n        if (link.source.id === nodeName) {\n          targetNodes.push(link.target.id.split(' ').join('-'));\n        } \n        \n        if (link.target.id === nodeName) {\n          targetNodes.push(link.source.id.split(' ').join('-'));\n        }\n      })\n      return targetNodes\n    },\n\n    nodeMouseout(d, e, nodes) {\n      if (this.stepper === this.stepList.length-1) {\n        // let targetNode = nodes[e]\n        // targetNode.classList.remove(\"selected\");\n        if (this.pinned.length === 0) {\n          this.noSelectedState(e);\n        }\n        this.$forceUpdate();\n      }\n    },\n\n    noSelectedState() {\n      d3.selectAll(\".node.element\").transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n      d3.selectAll(\".link.element\").transition().duration(this.transitionSpeed).style(\"opacity\", 0.4);\n      d3.selectAll(\".node-text\").transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n    },\n\n    responsivefy(svg) {\n      // get container + svg aspect ratio\n      var container = d3.select(svg.node().parentNode),\n          width = parseInt(svg.style(\"width\")),\n          height = parseInt(svg.style(\"height\")),\n          aspect = width / height;\n\n      // add viewBox and preserveAspectRatio properties,\n      // and call resize so that svg resizes on inital page load\n      svg.attr(\"viewBox\", \"0 0 \" + width + \" \" + height)\n          //.attr(\"perserveAspectRatio\", \"xMinYMid\")\n          .call(resize);\n\n      // to register multiple listeners for same event type, \n      // you need to add namespace, i.e., 'click.foo'\n      // necessary if you call invoke this function for multiple svgs\n      // api docs: https://github.com/mbostock/d3/wiki/Selections#on\n      d3.select(window).on(\"resize.\" + container.attr(\"id\"), resize);\n\n      // get width of container and resize svg to fit it\n      function resize() {\n          var targetWidth = parseInt(container.style(\"width\")) > 700 ? 700 : parseInt(container.style(\"width\"));\n          var targetHeight = Math.round(targetWidth / aspect);\n          svg.attr(\"width\", targetWidth);\n          svg.attr(\"height\", targetHeight);\n      }\n    },\n\n    initData() {\n      this.force = d3\n        .forceSimulation(this.nodes)\n        .force(\n          \"link\",\n          d3.forceLink(this.links)\n            .id(d => d.id)\n            .distance(this.linkDistance)\n        )\n        .force(\"charge\", d3.forceManyBody().strength(this.bodyStrength)) //The strength of the attraction or repulsion\n        .force('collision', d3.forceCollide().radius(function(d) {\n          return d.radius\n        }))\n        .force(\n          \"center\", \n          d3.forceCenter(this.width/1.75, this.height/1.75)\n        )\n        .on(\"tick\", this.ticked);\n    },\n\n    ticked() {\n      d3.selectAll(\".circ\")\n          .attr(\"cx\", (d) => d.x)\n          .attr(\"cy\", (d) => d.y);\n    },\n\n    initDragTickZoom() {\n      d3.selectAll(\".node\").call(this.drag(this.force));\n      this.force.on(\"tick\", () => {\n        if (this.curves) {\n          d3.selectAll(\".link\")\n          .data(this.links)\n          .attr('d', function (d) {\n            let dx = d.target.x - d.source.x;\n            let dy = d.target.y - d.source.y;\n            let dr = Math.sqrt(dx * dx + dy * dy);\n            return \"M\" + d.source.x + \",\" + d.source.y + \"A\" + dr + \",\" + dr + \" 1 0,1 \" + d.target.x + \",\" + d.target.y;\n          });\n        } else {\n          d3.selectAll(\".link\")\n          .data(this.links)\n          .attr(\"x1\", d => d.source.x)\n          .attr(\"y1\", d => d.source.y)\n          .attr(\"x2\", d => d.target.x)\n          .attr(\"y2\", d => d.target.y);\n        }\n        \n        d3.selectAll(\".node\")\n          .data(this.nodes)\n          .attr(\"cx\", d => d.x)\n          .attr(\"cy\", d => d.y);\n\n        d3.selectAll(\".node-text\")\n          .data(this.nodes)\n          .attr(\"x\", d => d.x)\n          .attr(\"y\", d => d.y);\n      });\n    },\n\n    drag(simulation) {\n      function dragstarted(d) {\n        if (!d3.event.active) simulation.alphaTarget(0.2).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n\n      function dragged(d) {\n        d.fx = d3.event.x;\n        d.fy = d3.event.y;\n      }\n\n      function dragended(d) {\n        if (!d3.event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      }\n\n      return d3\n        .drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended);\n    },\n  }\n};\n</script>\n\n<style>\n@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&display=swap');\n</style>\n\n<style scoped>\n.app {\n  display: inline-block;\n  position: relative;\n}\n\n.element {\n  transition: opacity 0.2s ease;\n}\n.selected {\n  opacity: 0.9 !important;\n}\n\n.node,\n.link {\n  cursor: pointer;\n}\n\n.btn-orange {\n  @apply transition duration-200 font-bold p-4 m-0 rounded inline-flex items-center \n        flex-grow-0 h-12 text-xl;\n  background-color: #FCB040;\n}\n\n.btn-orange:hover {\n  @apply text-white bg-red-700;\n}\n\n.header {\n  @apply text-center justify-between;\n}\n\n/* responsive, form small screens, use 13px font size */\n.sidebar-text {\n  @apply w-5/6 flex-auto rounded-md p-4 grid grid-cols-1 bg-orange-100;\n}\n\n.top-header {\n  font-family: 'Gordita', 'IBM Plex Sans';\n}\n\n.sub-header {\n  @apply text-sm;\n  font-family: 'Akkurat', 'IBM Plex Sans';\n}\n\n.sauces {\n  font-family: 'Gordita', 'IBM Plex Sans'; \n}\n\n.dot1 {\n  @apply mx-2;\n  height: 10px;\n  width: 10px;\n  background-color:#E4140F;\n  border-radius: 50%;\n  display: inline-block;\n}\n\n.dot2 {\n  height: 16px;\n  width: 16px;\n  background-color: #E4140F;\n  border-radius: 50%;\n  display: inline-block;\n}\n\n.rectangle1 {\n  height: 4px;\n  width: 30px;\n  opacity: 0.5;\n  display: inline-block;\n}\n\n.rectangle2 {\n  @apply mt-1;\n  height: 10px;\n  width: 30px;\n  opacity: 0.5;\n  display: inline-block;\n}\n</style>\n\n"]}]}