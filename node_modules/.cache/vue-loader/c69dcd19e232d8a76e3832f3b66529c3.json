{"remainingRequest":"/Users/bianchi_dy/Documents/GitHub/ingredient-network/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bianchi_dy/Documents/GitHub/ingredient-network/src/components/Network.vue?vue&type=template&id=2231c52e&scoped=true&","dependencies":[{"path":"/Users/bianchi_dy/Documents/GitHub/ingredient-network/src/components/Network.vue","mtime":1606292123804},{"path":"/Users/bianchi_dy/Documents/GitHub/ingredient-network/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bianchi_dy/Documents/GitHub/ingredient-network/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/bianchi_dy/Documents/GitHub/ingredient-network/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bianchi_dy/Documents/GitHub/ingredient-network/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}