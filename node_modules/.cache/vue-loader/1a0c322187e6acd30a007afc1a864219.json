{"remainingRequest":"/Users/bianchi_dy/Documents/GitHub/aviation-viz/routes/viz/routes-network/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bianchi_dy/Documents/GitHub/aviation-viz/routes/viz/routes-network/src/components/NetworkC.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/bianchi_dy/Documents/GitHub/aviation-viz/routes/viz/routes-network/src/components/NetworkC.vue","mtime":1622539983744},{"path":"/Users/bianchi_dy/Documents/GitHub/aviation-viz/routes/viz/routes-network/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bianchi_dy/Documents/GitHub/aviation-viz/routes/viz/routes-network/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["NetworkC.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NetworkC.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"app\" class=\"p-4\" >\n    <div class='inline-flex items-center bg-white w-full'>\n      <div class='flex-col mx-2'>\n       <div class='pr-2 font-bold text-xl'> Active: {{activeScale}}</div>\n       <div class='text-tiny'> {{description[activeScale]}} </div>\n      </div>\n\n      <div class=\"slidecontainer mx-1\">\n        Show labels if mention in cases is above <b>{{sliderValue}}</b>\n        <input type=\"range\" min=\"100\" max=\"2500\" v-model=\"sliderValue\" class=\"slider\" id=\"myRange\">\n      </div>\n\n      <button v-for=\"item in btns\" \n        :key=\"`btn-`+item\"\n        type=\"submit\" \n        :value=\"item\" \n        v-on:click=\"activeScale = item; changeColors();\"\n        class='p-2 mx-3 rounded-full bg-red-400 text-white font-bold hover:bg-red-800'> \n        {{item}} \n      </button>\n    </div>\n    <div id=\"chart\" class=\"justify-center flex my-1 absolute border border-gray-500\"> \n    </div>\n  </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\nimport { json, csv } from 'd3-fetch'\n//'../assets/js/mykey.js'\n// DOMTokenList.prototype.indexOf = Array.prototype.indexOf;\n\nexport default {\n  name: \"network\",\n  props: {\n    jsonURL: {\n      type: String,\n      default: () => 'routes_degree.json'\n    },\n\n    linkDistance: {\n      type: Number,\n      default: 30\n    },\n    // svg\n    svgSize: {\n      type: Object,\n      default: () => {\n        return {\n          width: window.innerWidth,\n          height: window.innerHeight\n        };\n      }\n    },\n\n    bodyStrength: {\n      type: Number,\n      default: -200\n    },\n\n    height: {\n      type: Number,\n      default: 800\n    },\n    \n    width: {\n      type: Number,\n      default: 1400\n    },\n\n    sliderValue: {\n      type: Number,\n      default: 100\n    },\n\n    margin: {\n      type: Object,\n      default: function () {\n        return {\n          top: 5,\n          right: 5,\n          bottom: 5,\n          left: 5\n        }\n      }\n    } \n  },\n  data() {\n    return {\n      bbBoxMargin: 20,\n      selection: {\n        links: [],\n        nodes: []\n      },\n      pinned: [], \n      nodeList: [],\n      linkList: [],\n      force: null,\n      zoom: d3.zoom(),\n      transitionSpeed: 200,\n      curves: true,\n      stepper: 0,\n      linkStroke: 'gray',\n      btns: ['d_centrality', 'c_centrality', 'b_centrality'],\n      c_centrality: [],\n      b_centrality: [],\n      d_centrality: [],\n      radiusRange: [1, 10],\n      fontsize:16, \n      activeScale: 'd_centrality',\n      description: {'d_centrality': ' Degree centrality, which is defined as the number of links incident upon a node (i.e., the number of ties that a node has). The degree can be interpreted in terms of the immediate risk of a node for catching whatever is flowing through the network (such as a virus, or some information).',\n        'c_centrality': 'the normalized closeness centrality (or closeness) of a node is the average length of the shortest path between the node and all other nodes in the graph. Thus the more central a node is, the closer it is to all other nodes.',\n        'b_centrality': 'Betweenness centrality quantifies the number of times a node acts as a bridge along the shortest path between two other nodes. It was introduced as a measure for quantifying the control of a human on the communication between other humans in a social network'}\n    };\n  },\n  computed: {\n    nodes() {\n      let nodes = this.nodeList.slice();\n      let nodeIds = [];\n      nodes = nodes.filter(node => {\n        if (nodeIds.indexOf(node.id) === -1) {\n          nodeIds.push(node.id);\n          return true;\n        } else {\n          return false;\n        }\n      });\n      return nodes;\n    },\n\n    links() {\n      return this.linkList;\n    },\n\n    activeDomain() {\n      if (this.activeScale === 'd_centrality') {\n        return this.d_centrality\n      } else if (this.activeScale === 'b_centrality') {\n        return this.b_centrality\n      } else if (this.activeScale === 'c_centrality'){\n        return this.c_centrality\n      }\n    },\n\n    centralityScale() {\n      return d3.scaleLinear().domain(this.activeDomain).range(['white', '#DA0E0E'])\n    } \n  },\n  watch: {\n    sliderValue: function() {\n      this.svg.selectAll('.node-text')\n        .transition().duration(this.transitionSpeed)\n        .attr('opacity', d => d.occurence > this.sliderValue ? 1 : 0);\n      this.$forceUpdate();\n    },\n    bodyStrength: function() {\n      this.initData();\n      this.$nextTick(function() {\n        this.initDragTickZoom();\n      });\n    },\n    linkDistance: function() {\n      this.initData();\n      this.$nextTick(function() {\n        this.initDragTickZoom();\n      });\n    },\n    nodes: function() {\n      this.initData();\n      this.$nextTick(function() {\n        this.initDragTickZoom();\n      });\n    }\n  },\n\n  created() {\n    this.initData();\n  },\n\n  mounted() {\n    this.getData()\n    this.initDragTickZoom();\n  },\n\n  methods: {\n    changeColors(){\n      let nodes = this.svg.selectAll('.node').transition().duration(this.transitionSpeed)\n        .attr('fill', (d) => {console.log(d); return this.centralityScale(d[this.activeScale]);} )\n    },\n\n    update(){\n      d3.select('#chart').select('svg').remove()\n      this.svg = this.getSvg()\n      this.drawChart()\n    },\n\n    getData () {\n      if (!this.jsonURL) {\n        throw new Error('Please provide either data or jsonURL')\n      } else {\n        this.processJSON(this.jsonURL)\n      }\n    },\n\n    getString(row) {\n      let label = row['country'].includes('mean') ? 'Average value for ' + row['element'] : row['country'] \n      let value = label + ': ' + (row[this.activeIndex] ? Math.round(row[this.activeIndex] * 10) / 10 : 'NIL')\n      return value\n    },\n\n    processJSON (url) {\n      json(url).then((data) => {\n        this.linkList = data.links\n        this.nodeList = data.nodes\n\n        this.nodeList.forEach( node=> {\n          this.c_centrality.push(node.c_centrality)\n          this.b_centrality.push(node.b_centrality)\n          this.d_centrality.push(node.d_centrality)\n        })\n\n        this.c_centrality = [0, d3.extent(this.c_centrality)[1]]\n        this.b_centrality = [0, d3.extent(this.b_centrality)[1]]\n        this.d_centrality = [0, d3.extent(this.d_centrality)[1]]\n        this.mount = true\n        this.update()\n      })\n    },\n\n    getSvg () {\n      const { svgWidth, svgHeight } = this\n      const { margin } = this\n\n      this.svgWidth = this.width\n      this.svgHeight = this.height\n      const width = this.svgWidth + margin.left + margin.right\n      const height = this.svgHeight + margin.top + margin.bottom\n\n      let svg = d3.select(\"#chart\").append(\"svg\")\n              .attr(\"width\", width)\n              .attr(\"height\", height)\n              .attr(\"id\", \"container\");\n              //.call(this.responsivefy);\n\n      return svg\n    },\n\n    drawChart() {\n      let g = this.svg.append('g')\n\n      let edges \n      if (this.curves) {\n        edges = g.append(\"g\")\n          .selectAll(\".link\")\n          .data(this.links)\n          .join(\"path\")\n          .attr(\"opacity\", 0.1)\n          .attr(\"stroke\", this.linkStroke)\n          .attr(\"fill\", \"transparent\")\n          .attr('class', function(d) {\n          \n            let source = d.source.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\");\n            let target = d.target.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\");\n            return 'link element ' + source + ' ' + target;\n            })\n          .attr('stroke-linecap', 'round')\n          .attr('stroke-width', function (d) {\n            return d3.scaleLinear().domain([5, 10]).range([1, 20])(d.value);\n          });\n      } else {\n        edges = g.append(\"g\")\n        .selectAll(\".link\")\n        .data(this.links)\n        .enter().append(\"line\")\n        .attr('class', function(d) {\n          let source = d.source.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\");\n          let target = d.target.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\");\n          return 'link element ' + source + ' ' + target;\n          })\n        .attr('opacity', 0.1)\n        .attr('stroke-linecap', 'round')\n        .attr('stroke', this.linkStroke)\n        .attr('stroke-width', function (d) {\n            return d3.scaleLinear().domain([1, 30]).range([1, 30])(d.value);\n          });\n      }\n\n      let nodes = g.append(\"g\")\n        .selectAll(\".node\")\n        .data(this.nodes)\n        .enter().append('circle')\n        .attr('id', (d) => d.index)\n        .attr('class', function(d) {\n          let nodeClass=''\n          return 'node element ' + d.id.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\");\n          })\n        .attr('fill', (d) => this.centralityScale(d[this.activeScale]))\n        .attr('stroke', (d) => d.child === true ? 'goldenrod' : 'black')\n        .attr('stroke-width', 2)\n        .attr('r', (d) => d3.scaleLinear().domain([1, 100]).range(this.radiusRange)(d.occurence))\n        .on('mouseover', (d, e, nodes) => this.nodeMouseover(d, e, nodes))\n        .on('mouseout', (d, e, nodes) => this.nodeMouseout(d, e, nodes));\n\n      let blackOut = this.blackOut\n      \n      //Add single line text\n      g.append(\"g\")\n        .selectAll(\".text\")\n        .data(this.nodes)\n        .enter()\n        .append('text')\n        .attr('class', (d) => {\n          if (d.occurence > this.sliderValue) {\n            return 'emph node-text ' + d.id.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\");\n          }\n\n          return 'node-text ' + d.id.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\");\n        })\n        .text((d) => d.id)\n        .attr('fill', 'black')\n        .attr('dx', 0)\n        .attr('alignment-baseline', 'text-top')\n        .attr('text-anchor', 'middle')\n        .attr('font-size',this.fontsize)\n        .attr('opacity', (d) => d.occurence > this.sliderValue ? 1 : 0)\n        .on('mouseover', (d, e, nodes) => this.nodeMouseover(d, e, nodes))\n        .on('mouseout', (d, e, nodes) => this.nodeMouseout(d, e, nodes));\n\n      this.initDragTickZoom()\n\n      let zoomLvl = 0.5;\n      let lastK = 0;\n      \n      this.svg.call(d3.zoom()\n      .extent([[0, 0], [this.svgWidth, this.svgHeight]])\n      .scaleExtent([0.25, 80])\n      .on(\"zoom\", zoomed));\n\n      function zoomed() {\n        let e = d3.event\n        \n        if(e.transform.k > 2 && lastK != e.transform.k){\n          lastK = e.transform.k;\n          // console.log(\"zoomed\");\n          zoomLvl =Math.log2(e.transform.k);\n          nodes.attr(\"stroke-width\", 1.5/zoomLvl );\n          edges.attr(\"stroke-width\",  d => Math.sqrt(d.value)/(zoomLvl));\n        }\n      \n        g.attr(\"transform\", e.transform);\n      }\n    },\n\n    nodeMouseover(d, e, nodes) {\n      let targetNode = nodes[e]\n      this.activeNode = d.id\n      this.highlightNode(this.activeNode, true, true, true);\n      this.$forceUpdate();\n    },\n\n    highlightNode(nodeName, highlightLinks, highlightOthers, decreaseOpacity){\n      let nodeClass = []\n      \n      if (Array.isArray(nodeName)) {\n        for (let i in nodeName){\n          nodeClass.push(nodeName[i].split(' ').join('').replace(/[^\\w\\s]|_/g, \"\"))\n        }\n      } else {\n        nodeClass = nodeName.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\");\n      }\n\n      if (decreaseOpacity) {\n        let opacity = 0.01;\n\n        // Decrease opacity for all irrelevant nodes and their text\n        d3.selectAll(\".node.element\").transition().duration(this.transitionSpeed).style(\"opacity\", opacity);\n        d3.selectAll(\".node-text\").transition().duration(this.transitionSpeed).style(\"opacity\", opacity);\n      }\n\n      // Highlight relevant nodes and their text\n      if (Array.isArray(nodeClass)) {\n        for (let i in nodeClass){\n          d3.selectAll(\".node.element.\"+nodeClass[i]).transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n          d3.selectAll(\".node-text.\"+nodeClass[i]).transition().duration(this.transitionSpeed).style(\"opacity\", 1)\n            .attr('font-size',this.fontsize);\n        }\n      } else {\n        d3.selectAll(\".node.element.\"+nodeClass).transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n        d3.selectAll(\".node-text.\"+nodeClass).transition().duration(this.transitionSpeed).style(\"opacity\", 1)\n          .attr('font-size',this.fontsize);\n      }\n\n      // Applicable only to mouse interactions, and NOT to stepper\n      if (highlightOthers) {\n        let otherNodes = this.identifyTargets(nodeName);\n        otherNodes.forEach(node => {\n          d3.selectAll(\".node.element.\"+ node).transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n          d3.selectAll(\".node-text.\"+ node).transition().duration(this.transitionSpeed).style(\"opacity\", 1)\n            .attr('font-size',this.fontsize);\n        })\n      }\n      \n      if (decreaseOpacity) {\n        // Decrease opacity of irrelevant links\n        d3.selectAll(\".link.element\").transition().duration(this.transitionSpeed).style(\"opacity\", 0);\n      }\n\n      // Higlight links\n      if (highlightLinks) {\n        let source = nodeName.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\")\n        let sourceClass = \".link.element.\" + source\n        d3.selectAll(sourceClass).transition().duration(this.transitionSpeed).style(\"opacity\", 0.4);\n      }\n    },\n\n    identifyTargets(nodeName) {\n      let targetNodes = []\n      let count = 0\n      this.links.forEach(link => {\n        if (link.source.id === nodeName || link.target.id === nodeName){\n          count+=1;\n        }\n        if (link.source.id === nodeName) {\n          targetNodes.push(link.target.id.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\"));\n        } \n        \n        if (link.target.id === nodeName) {\n          targetNodes.push(link.source.id.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\"));\n        }\n      })\n      return targetNodes\n    },\n\n    nodeMouseout(d, e, nodes) {\n      this.noSelectedState(e);\n      this.$forceUpdate();\n    },\n\n    noSelectedState() {\n      d3.selectAll(\".node.element\").transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n      d3.selectAll(\".link.element\").transition().duration(this.transitionSpeed).style(\"opacity\", 0.1);\n      d3.selectAll(\".node-text\").transition().duration(this.transitionSpeed).style('opacity', d => d.occurence > this.sliderValue ? 1 : 0);\n      //d3.selectAll(\".emph\").transition().duration(this.transitionSpeed).style(\"opacity\", 1).attr('font-size',this.fontsize);\n    },\n\n    responsivefy(svg) {\n      // get container + svg aspect ratio\n      var container = d3.select(svg.node().parentNode),\n          width = parseInt(svg.style(\"width\")),\n          height = parseInt(svg.style(\"height\")),\n          aspect = width / height;\n\n      // add viewBox and preserveAspectRatio properties,\n      // and call resize so that svg resizes on inital page load\n      svg.attr(\"viewBox\", \"0 0 \" + width + \" \" + height)\n          //.attr(\"perserveAspectRatio\", \"xMinYMid\")\n          .call(resize);\n\n      // to register multiple listeners for same event type, \n      // you need to add namespace, i.e., 'click.foo'\n      // necessary if you call invoke this function for multiple svgs\n      // api docs: https://github.com/mbostock/d3/wiki/Selections#on\n      d3.select(window).on(\"resize.\" + container.attr(\"id\"), resize);\n\n      // get width of container and resize svg to fit it\n      function resize() {\n          var targetWidth = parseInt(container.style(\"width\")) > 1000 ? 1000 : parseInt(container.style(\"width\"));\n          var targetHeight = Math.round(targetWidth / aspect);\n          svg.attr(\"width\", targetWidth);\n          svg.attr(\"height\", targetHeight);\n      }\n    },\n\n    initData() {\n      let linkDistanceFxn = d3.scaleLinear().domain([1, 1663]).range([50, 0])\n      this.force = d3\n        .forceSimulation(this.nodes)\n        .force( \n          \"link\",\n          d3.forceLink(this.links)\n            .id(d => d.id)\n            .distance(d => {return linkDistanceFxn(d.value)})\n        )\n        .force(\"charge\", d3.forceManyBody().strength(this.bodyStrength)) //The strength of the attraction or repulsion\n        .force('collision', d3.forceCollide().radius(function(d) {\n          return d3.scaleLinear().domain([1, 1000]).range([10, 100])(d.occurence) + 5\n        }))\n        .force(\n          \"center\",\n          d3.forceCenter(this.svgWidth/2, this.svgHeight/2)\n        )\n        .velocityDecay(0.2);\n    },\n\n    initDragTickZoom() {\n      d3.selectAll(\".node\").call(this.drag(this.force));\n\n      this.force.on(\"tick\", () => {\n         d3.selectAll(\".node\")\n          .data(this.nodes)\n          .attr('cx', d=> d.x)\n          .attr('cy', d=> d.y);\n          // .attr(\"cx\", d => {\n          //   let radius =  d3.scaleLinear().domain([1, 1700]).range([5, 20])(d.occurence)\n          //   let newX = Math.max(radius, Math.min(this.width - this.bbBoxMargin - radius, d.x));\n          //   return newX\n          // })\n          // .attr(\"cy\", d => {\n          //   let radius =  d3.scaleLinear().domain([1, 1700]).range([5, 20])(d.occurence)\n          //   let newY = Math.max(radius, Math.min(this.height - this.bbBoxMargin - radius, d.y));\n          //   return newY\n          // });\n\n        d3.selectAll(\".node-text\")\n          .data(this.nodes)\n          .attr('x', d=> d.x)\n          .attr('y', d=> d.y);\n          // .attr(\"x\", d => {\n          //   let radius =  d3.scaleLinear().domain([1, 1700]).range([5, 20])(d.occurence)\n          //   let newX = Math.max(radius, Math.min(this.width - this.bbBoxMargin - radius, d.x));\n          //   return newX\n          // })\n          // .attr(\"y\", d => {\n          //   let radius =  d3.scaleLinear().domain([1, 1700]).range([5, 20])(d.occurence)\n          //   let newY = Math.max(radius, Math.min(this.height - this.bbBoxMargin - radius, d.y));\n          //   return newY\n          // });\n\n        if (this.curves) {\n          d3.selectAll(\".link\")\n          .data(this.links)\n          .attr('d', function (d) {\n            let dx = d.target.x - d.source.x;\n            let dy = d.target.y - d.source.y;\n            let dr = Math.sqrt(dx * dx + dy * dy);\n            return \"M\" + d.source.x + \",\" + d.source.y + \"A\" + dr + \",\" + dr + \" 1 0,1 \" + d.target.x + \",\" + d.target.y;\n          });\n        } else {\n          d3.selectAll(\".link\")\n          .data(this.links)\n          .attr(\"x1\", d => d.source.x)\n          .attr(\"y1\", d => d.source.y)\n          .attr(\"x2\", d => d.target.x)\n          .attr(\"y2\", d => d.target.y);\n        }\n      });\n    },\n\n\n    drag(simulation) {\n      function dragstarted(d) {\n        if (!d3.event.active) simulation.alphaTarget(0.2).restart();\n        d3.select(this).classed('fixed', d.fixed = true);\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n\n      function dragged(d) {\n        d.fx = d3.event.x;\n        d.fy = d3.event.y;\n      }\n\n      function dragended(d) {\n        if (!d3.event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      }\n\n      return d3\n        .drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended);\n    },\n  }\n};\n</script>\n\n<style>\n@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&display=swap');\n</style>\n\n<style scoped>\n.app {\n  display: inline-block;\n  position: relative;\n}\n\n.element {\n  transition: opacity 0.2s ease;\n}\n.selected {\n  opacity: 0.9 !important;\n}\n\n.node,\n.link {\n  cursor: pointer;\n}\n</style>\n\n"]}]}