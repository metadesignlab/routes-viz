{"remainingRequest":"/Users/bianchi_dy/Documents/GitHub/MDL_URA/bd-network/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bianchi_dy/Documents/GitHub/MDL_URA/bd-network/src/components/Network.vue?vue&type=style&index=1&id=2231c52e&scoped=true&lang=css&","dependencies":[{"path":"/Users/bianchi_dy/Documents/GitHub/MDL_URA/bd-network/src/components/Network.vue","mtime":1606894962124},{"path":"/Users/bianchi_dy/Documents/GitHub/MDL_URA/bd-network/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bianchi_dy/Documents/GitHub/MDL_URA/bd-network/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/bianchi_dy/Documents/GitHub/MDL_URA/bd-network/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/bianchi_dy/Documents/GitHub/MDL_URA/bd-network/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bianchi_dy/Documents/GitHub/MDL_URA/bd-network/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmFwcCB7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQoKLmVsZW1lbnQgewogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyBlYXNlOwp9Ci5zZWxlY3RlZCB7CiAgb3BhY2l0eTogMC45ICFpbXBvcnRhbnQ7Cn0KCi5ub2RlLAoubGluayB7CiAgY3Vyc29yOiBwb2ludGVyOwp9CgouYnRuLW9yYW5nZSB7CiAgQGFwcGx5IHRyYW5zaXRpb24gZHVyYXRpb24tMjAwIGZvbnQtYm9sZCBwLTQgbS0wIHJvdW5kZWQgaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIAogICAgICAgIGZsZXgtZ3Jvdy0wIGgtMTIgdGV4dC14bDsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkNCMDQwOwp9CgouYnRuLW9yYW5nZTpob3ZlciB7CiAgQGFwcGx5IHRleHQtd2hpdGUgYmctcmVkLTcwMDsKfQoKLmhlYWRlciB7CiAgQGFwcGx5IHRleHQtY2VudGVyIGp1c3RpZnktYmV0d2VlbjsKfQoKLyogcmVzcG9uc2l2ZSwgZm9ybSBzbWFsbCBzY3JlZW5zLCB1c2UgMTNweCBmb250IHNpemUgKi8KLnNpZGViYXItdGV4dCB7CiAgQGFwcGx5IHctNS82IGZsZXgtYXV0byByb3VuZGVkLW1kIHAtMyBncmlkIGdyaWQtY29scy0xIGJnLW9yYW5nZS0xMDA7Cn0KCi50b3AtaGVhZGVyLCAuZm9udC10YWcsIC5zYXVjZXMsIC5zdWItaGVhZGVyIHsKICBmb250LWZhbWlseTogJ0dvcmRpdGEnLCAnSUJNIFBsZXggU2Fucyc7Cn0KCi5idG4gewogIEBhcHBseSBwLTU7CiAgYm9yZGVyLXJhZGl1czogNTAlOwp9CgouZG90MSB7CiAgQGFwcGx5IG14LTI7CiAgaGVpZ2h0OiA2cHg7CiAgd2lkdGg6IDZweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiNFNDE0MEY7CiAgYm9yZGVyLXJhZGl1czogNTAlOwogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKfQoKLmRvdDIgewogIGhlaWdodDogMTJweDsKICB3aWR0aDogMTJweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTQxNDBGOwogIGJvcmRlci1yYWRpdXM6IDUwJTsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Cn0KCi5yZWN0YW5nbGUxIHsKICBoZWlnaHQ6IDRweDsKICB3aWR0aDogMzBweDsKICBvcGFjaXR5OiAwLjU7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9CgoucmVjdGFuZ2xlMiB7CiAgQGFwcGx5IG10LTE7CiAgaGVpZ2h0OiA4cHg7CiAgd2lkdGg6IDMwcHg7CiAgb3BhY2l0eTogMC41OwogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKfQoKQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2MDBweCkgewogIGJvZHkgewogICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRibHVlOwogIH0KfQo="},{"version":3,"sources":["Network.vue"],"names":[],"mappingsgBA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Network.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"app\" class=\"flex flex-col p-4\" >\n    <div id=\"chart\" class=\"justify-center flex my-1 border border-gray-400\"> \n    </div>\n  </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\nimport { json, csv } from 'd3-fetch'\n//'../assets/js/mykey.js'\n// DOMTokenList.prototype.indexOf = Array.prototype.indexOf;\n\nexport default {\n  name: \"network\",\n  props: {\n    jsonURL: {\n      type: String,\n      default: () => 'business_descr_relationships.json'\n    },\n\n    linkDistance: {\n      type: Number,\n      default: 30\n    },\n    // svg\n    svgSize: {\n      type: Object,\n      default: () => {\n        return {\n          width: window.innerWidth,\n          height: window.innerHeight\n        };\n      }\n    },\n\n    bodyStrength: {\n      type: Number,\n      default: -1\n    },\n\n    height: {\n      type: Number,\n      default: 800\n    },\n    \n    width: {\n      type: Number,\n      default: 1200\n    },\n\n    margin: {\n      type: Object,\n      default: function () {\n        return {\n          top: 5,\n          right: 5,\n          bottom: 5,\n          left: 5\n        }\n      }\n    } \n  },\n  data() {\n    return {\n      bbBoxMargin: 20,\n      selection: {\n        links: [],\n        nodes: []\n      },\n      pinned: [], \n      nodeList: [],\n      linkList: [],\n      stepList: [],\n      profileIngredients: [],\n      force: null,\n      zoom: d3.zoom(),\n      nodeColor: ['#FFDA95', '#FCB040', '#FF7629', '#E4140F', '#612348', '#006428',\n                '#33A844', '#A0B036', '#D0E820', '#D8CECB'],\n      blackOut: ['#FFDA95', '#D0E820', '#D8CECB', '#FCB040'],\n      highlightFlavors: [],\n      activeNode: 'Flavor',\n      activeNodeColor: 'black',\n      activeNodeProfile: 3,\n      activeNodeSidebar: 'Click on the arrows above to explore common flavours that are paired with chili.',\n      activeNodeVariants: '',\n      activeNodeSauces: 0,\n      allSauces: 45,\n      transitionSpeed: 200,\n      curves: false,\n      stepper: 0,\n      linkStroke: 'gray',\n      radiusRange: [5, 50]\n    };\n  },\n  computed: {\n    nodes() {\n      let nodes = this.nodeList.slice();\n      let nodeIds = [];\n      nodes = nodes.filter(node => {\n        if (nodeIds.indexOf(node.id) === -1) {\n          nodeIds.push(node.id);\n          return true;\n        } else {\n          return false;\n        }\n      });\n      return nodes;\n    },\n\n    links() {\n      return this.linkList;\n    },\n  },\n  watch: {\n    bodyStrength: function() {\n      this.initData();\n      this.$nextTick(function() {\n        this.initDragTickZoom();\n      });\n    },\n    linkDistance: function() {\n      this.initData();\n      this.$nextTick(function() {\n        this.initDragTickZoom();\n      });\n    },\n    nodes: function() {\n      this.initData();\n      this.$nextTick(function() {\n        this.initDragTickZoom();\n      });\n    }\n  },\n\n  created() {\n    this.initData();\n  },\n\n  mounted() {\n    this.getData()\n    this.initDragTickZoom();\n  },\n\n  methods: {\n    highlightSelective(activeIndex, decreaseOpacity) {\n      // Highlight the right things\n      // Check if chili or other steps\n      if (activeIndex > -1) {\n        let ingredients = this.profileIngredients[activeIndex]\n        this.highlightNode(ingredients, false, false, decreaseOpacity)\n      } else {\n        let highlightLinks = this.stepper === 0 ? true : false\n        this.highlightNode(activeNode, highlightLinks, true, decreaseOpacity)\n      }\n\n      this.$forceUpdate();\n    },\n\n    update(){\n      d3.select('#chart').select('svg').remove()\n      this.svg = this.getSvg()\n      this.drawChart()\n    },\n\n    getData () {\n      if (!this.jsonURL) {\n        throw new Error('Please provide either data or jsonURL')\n      } else {\n        this.processJSON(this.jsonURL)\n      }\n    },\n\n    getString(row) {\n      let label = row['country'].includes('mean') ? 'Average value for ' + row['element'] : row['country'] \n      let value = label + ': ' + (row[this.activeIndex] ? Math.round(row[this.activeIndex] * 10) / 10 : 'NIL')\n      return value\n    },\n\n    processJSON (url) {\n      json(url).then((data) => {\n        this.linkList = data.links\n        this.nodeList = data.nodes\n\n        this.nodeList.forEach( node=> {\n          if (node.profile in this.profileIngredients === false) {\n            this.profileIngredients[node.profile] = []\n          }\n\n          this.profileIngredients[node.profile].push(node.id);\n        })\n\n        this.mount = true\n        this.update()\n      })\n    },\n\n    getSvg () {\n      const { svgWidth, svgHeight } = this\n      const { margin } = this\n\n      this.svgWidth = this.width\n      this.svgHeight = this.height\n      const width = this.svgWidth + margin.left + margin.right\n      const height = this.svgHeight + margin.top + margin.bottom\n      console.log(this.svgWidth, this.svgHeight)\n      let svg = d3.select(\"#chart\").append(\"svg\")\n              .attr(\"width\", width)\n              .attr(\"height\", height)\n              .attr(\"id\", \"container\");\n              //.call(this.responsivefy);\n\n      return svg\n    },\n\n    drawChart() {\n      let edges \n      if (this.curves) {\n        edges = this.svg.append(\"g\")\n          .selectAll(\".link\")\n          .data(this.links)\n          .join(\"path\")\n          .attr(\"opacity\", 0.4)\n          .attr(\"stroke\", this.linkStroke)\n          .attr(\"fill\", \"transparent\")\n          .attr('class', function(d) {\n            let source = d.source.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\");\n            let target = d.target.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\");\n            return 'link element ' + source + ' ' + target;\n            })\n          .attr('stroke-linecap', 'round')\n          .attr('stroke-width', function (d) {\n            return 1;\n          });\n      } else {\n        edges = this.svg.append(\"g\")\n        .selectAll(\".link\")\n        .data(this.links)\n        .enter().append(\"line\")\n        .attr('class', function(d) {\n          let source = d.source.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\");\n          let target = d.target.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\");\n          return 'link element ' + source + ' ' + target;\n          })\n        .attr('opacity', 0.4)\n        .attr('stroke-linecap', 'round')\n        .attr('stroke', this.linkStroke)\n        .attr('stroke-width', function (d) {\n            return d3.scaleLinear().domain([1, 3200]).range([1, 30])(d.value);\n          });\n      }\n      let nodes = this.svg.append(\"g\")\n        .selectAll(\".node\")\n        .data(this.nodes)\n        .enter().append('circle')\n        .attr('id', (d) => d.index)\n        .attr('class', function(d) {\n          let nodeClass=''\n          return 'node element ' + d.id.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\");\n          })\n        .attr('fill', (d) => d.child === true ? 'steelblue' : 'goldenrod')\n        .attr('stroke', 'white')\n        .attr('r', (d) => d3.scaleLinear().domain([0, 3000]).range([5, 30])(d.occurence))\n        .on('mouseover', (d, e, nodes) => this.nodeMouseover(d, e, nodes))\n        .on('mouseout', (d, e, nodes) => this.nodeMouseout(d, e, nodes));\n\n      let blackOut = this.blackOut\n\n      // Add single line text\n      // this.svg.append(\"g\")\n      //   .selectAll(\".text\")\n      //   .data(this.nodes)\n      //   .enter()\n      //   .append('text')\n      //   .attr('class', function(d) {\n      //     let nodeClass=''\n      //     return 'node-text ' + d.id.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\");\n      //   })\n      //   .text((d) => d.id)\n      //   .attr('fill', (d) => this.nodeColor[d['profile']])\n      //   .attr('dx', 0)\n      //   .attr('alignment-baseline', 'text-top')\n      //   .attr('text-anchor', 'middle')\n      //   .attr('fill', 'black')\n      //   .attr('font-size', 8)\n      //   .attr('opacity', 0.4)\n      //   .on('mouseover', (d, e, nodes) => this.nodeMouseover(d, e, nodes))\n      //   .on('mouseout', (d, e, nodes) => this.nodeMouseout(d, e, nodes));\n\n      this.initDragTickZoom()\n    },\n\n    nodeMouseover(d, e, nodes) {\n      let targetNode = nodes[e]\n      this.activeNode = d.id\n      this.highlightNode(this.activeNode, true, true, true);\n      this.$forceUpdate();\n    },\n\n    highlightNode(nodeName, highlightLinks, highlightOthers, decreaseOpacity){\n      let nodeClass = []\n      \n      if (Array.isArray(nodeName)) {\n        for (let i in nodeName){\n          nodeClass.push(nodeName[i].split(' ').join('').replace(/[^\\w\\s]|_/g, \"\"))\n        }\n      } else {\n        nodeClass = nodeName.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\");\n      }\n      console.log(nodeClass)\n      if (decreaseOpacity) {\n        let opacity = 0.05;\n\n        // Decrease opacity for all irrelevant nodes and their text\n        d3.selectAll(\".node.element\").transition().duration(this.transitionSpeed).style(\"opacity\", opacity);\n        d3.selectAll(\".node-text\").transition().duration(this.transitionSpeed).style(\"opacity\", opacity);\n      }\n\n      // Highlight relevant nodes and their text\n      if (Array.isArray(nodeClass)) {\n        for (let i in nodeClass){\n          d3.selectAll(\".node.element.\"+nodeClass[i]).transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n          d3.selectAll(\".node-text.\"+nodeClass[i]).transition().duration(this.transitionSpeed).style(\"opacity\", 1)\n            .attr('font-size', 12);\n        }\n      } else {\n        d3.selectAll(\".node.element.\"+nodeClass).transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n        d3.selectAll(\".node-text.\"+nodeClass).transition().duration(this.transitionSpeed).style(\"opacity\", 1)\n          .attr('font-size', 12);\n      }\n\n      // Applicable only to mouse interactions, and NOT to stepper\n      if (highlightOthers) {\n        let otherNodes = this.identifyTargets(nodeName);\n        otherNodes.forEach(node => {\n          d3.selectAll(\".node.element.\"+ node).transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n          d3.selectAll(\".node-text.\"+ node).transition().duration(this.transitionSpeed).style(\"opacity\", 1)\n            .attr('font-size', 12);\n        })\n      }\n      \n      if (decreaseOpacity) {\n        // Decrease opacity of irrelevant links\n        d3.selectAll(\".link.element\").transition().duration(this.transitionSpeed).style(\"opacity\", 0.01);\n      }\n\n      // Higlight links\n      if (highlightLinks) {\n        let source = nodeName.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\")\n        let sourceClass = \".link.element.\" + source\n        console.log(source)\n        d3.selectAll(sourceClass).transition().duration(this.transitionSpeed).style(\"opacity\", 0.4);\n      }\n    },\n\n    identifyTargets(nodeName) {\n      let targetNodes = []\n      let count = 0\n      this.links.forEach(link => {\n        if (link.source.id === nodeName || link.target.id === nodeName){\n          count+=1;\n        }\n        if (link.source.id === nodeName) {\n          targetNodes.push(link.target.id.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\"));\n        } \n        \n        if (link.target.id === nodeName) {\n          targetNodes.push(link.source.id.split(' ').join('').replace(/[^\\w\\s]|_/g, \"\"));\n        }\n      })\n      return targetNodes\n    },\n\n    nodeMouseout(d, e, nodes) {\n      this.noSelectedState(e);\n      this.$forceUpdate();\n    },\n\n    noSelectedState() {\n      d3.selectAll(\".node.element\").transition().duration(this.transitionSpeed).style(\"opacity\", 1);\n      d3.selectAll(\".link.element\").transition().duration(this.transitionSpeed).style(\"opacity\", 0.4);\n      d3.selectAll(\".node-text\").transition().duration(this.transitionSpeed).style(\"opacity\", 0.4).attr('font-size', 8);\n    },\n\n    responsivefy(svg) {\n      // get container + svg aspect ratio\n      var container = d3.select(svg.node().parentNode),\n          width = parseInt(svg.style(\"width\")),\n          height = parseInt(svg.style(\"height\")),\n          aspect = width / height;\n\n      // add viewBox and preserveAspectRatio properties,\n      // and call resize so that svg resizes on inital page load\n      svg.attr(\"viewBox\", \"0 0 \" + width + \" \" + height)\n          //.attr(\"perserveAspectRatio\", \"xMinYMid\")\n          .call(resize);\n\n      // to register multiple listeners for same event type, \n      // you need to add namespace, i.e., 'click.foo'\n      // necessary if you call invoke this function for multiple svgs\n      // api docs: https://github.com/mbostock/d3/wiki/Selections#on\n      d3.select(window).on(\"resize.\" + container.attr(\"id\"), resize);\n\n      // get width of container and resize svg to fit it\n      function resize() {\n          var targetWidth = parseInt(container.style(\"width\")) > 1000 ? 1000 : parseInt(container.style(\"width\"));\n          var targetHeight = Math.round(targetWidth / aspect);\n          svg.attr(\"width\", targetWidth);\n          svg.attr(\"height\", targetHeight);\n      }\n    },\n\n    initData() {\n      this.force = d3\n        .forceSimulation(this.nodes)\n        .force(\n          \"link\",\n          d3.forceLink(this.links)\n            .id(d => d.id)\n            .distance(100)\n        )\n        .force(\"charge\", d3.forceManyBody().distanceMax(40).strength(50)) //The strength of the attraction or repulsion\n        .force('collision', d3.forceCollide().radius(function(d) {\n          return d3.scaleLinear().domain([0, 3000]).range([5, 100])(d.occurence) + 1\n        }))\n        .force(\n          \"center\",\n          d3.forceCenter(this.svgWidth/2, this.svgHeight/2)\n        )\n        .velocityDecay(0.1);\n    },\n\n    initDragTickZoom() {\n      d3.selectAll(\".node\").call(this.drag(this.force));\n\n      this.force.on(\"tick\", () => {\n         d3.selectAll(\".node\")\n          .data(this.nodes)\n          .attr('cx', d=> d.x)\n          .attr('cy', d=> d.y);\n          // .attr(\"cx\", d => {\n          //   let radius =  d3.scaleLinear().domain([1, 1700]).range([5, 20])(d.occurence)\n          //   let newX = Math.max(radius, Math.min(this.width - this.bbBoxMargin - radius, d.x));\n          //   return newX\n          // })\n          // .attr(\"cy\", d => {\n          //   let radius =  d3.scaleLinear().domain([1, 1700]).range([5, 20])(d.occurence)\n          //   let newY = Math.max(radius, Math.min(this.height - this.bbBoxMargin - radius, d.y));\n          //   return newY\n          // });\n\n        d3.selectAll(\".node-text\")\n          .data(this.nodes)\n          .attr('x', d=> d.x)\n          .attr('y', d=> d.y);\n          // .attr(\"x\", d => {\n          //   let radius =  d3.scaleLinear().domain([1, 1700]).range([5, 20])(d.occurence)\n          //   let newX = Math.max(radius, Math.min(this.width - this.bbBoxMargin - radius, d.x));\n          //   return newX\n          // })\n          // .attr(\"y\", d => {\n          //   let radius =  d3.scaleLinear().domain([1, 1700]).range([5, 20])(d.occurence)\n          //   let newY = Math.max(radius, Math.min(this.height - this.bbBoxMargin - radius, d.y));\n          //   return newY\n          // });\n\n        if (this.curves) {\n          d3.selectAll(\".link\")\n          .data(this.links)\n          .attr('d', function (d) {\n            let dx = d.target.x - d.source.x;\n            let dy = d.target.y - d.source.y;\n            let dr = Math.sqrt(dx * dx + dy * dy);\n            return \"M\" + d.source.x + \",\" + d.source.y + \"A\" + dr + \",\" + dr + \" 1 0,1 \" + d.target.x + \",\" + d.target.y;\n          });\n        } else {\n          d3.selectAll(\".link\")\n          .data(this.links)\n          .attr(\"x1\", d => d.source.x)\n          .attr(\"y1\", d => d.source.y)\n          .attr(\"x2\", d => d.target.x)\n          .attr(\"y2\", d => d.target.y);\n        }\n        \n       \n      });\n    },\n\n    drag(simulation) {\n      function dragstarted(d) {\n        if (!d3.event.active) simulation.alphaTarget(0.2).restart();\n        d3.select(this).classed('fixed', d.fixed = true);\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n\n      function dragged(d) {\n        d.fx = d3.event.x;\n        d.fy = d3.event.y;\n      }\n\n      function dragended(d) {\n        if (!d3.event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      }\n\n      return d3\n        .drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended);\n    },\n  }\n};\n</script>\n\n<style>\n@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&display=swap');\n</style>\n\n<style scoped>\n.app {\n  display: inline-block;\n  position: relative;\n}\n\n.element {\n  transition: opacity 0.2s ease;\n}\n.selected {\n  opacity: 0.9 !important;\n}\n\n.node,\n.link {\n  cursor: pointer;\n}\n\n.btn-orange {\n  @apply transition duration-200 font-bold p-4 m-0 rounded inline-flex items-center \n        flex-grow-0 h-12 text-xl;\n  background-color: #FCB040;\n}\n\n.btn-orange:hover {\n  @apply text-white bg-red-700;\n}\n\n.header {\n  @apply text-center justify-between;\n}\n\n/* responsive, form small screens, use 13px font size */\n.sidebar-text {\n  @apply w-5/6 flex-auto rounded-md p-3 grid grid-cols-1 bg-orange-100;\n}\n\n.top-header, .font-tag, .sauces, .sub-header {\n  font-family: 'Gordita', 'IBM Plex Sans';\n}\n\n.btn {\n  @apply p-5;\n  border-radius: 50%;\n}\n\n.dot1 {\n  @apply mx-2;\n  height: 6px;\n  width: 6px;\n  background-color:#E4140F;\n  border-radius: 50%;\n  display: inline-block;\n}\n\n.dot2 {\n  height: 12px;\n  width: 12px;\n  background-color: #E4140F;\n  border-radius: 50%;\n  display: inline-block;\n}\n\n.rectangle1 {\n  height: 4px;\n  width: 30px;\n  opacity: 0.5;\n  display: inline-block;\n}\n\n.rectangle2 {\n  @apply mt-1;\n  height: 8px;\n  width: 30px;\n  opacity: 0.5;\n  display: inline-block;\n}\n\n@media only screen and (max-width: 600px) {\n  body {\n    background-color: lightblue;\n  }\n}\n</style>\n\n"]}]}